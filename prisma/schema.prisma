// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// app
model President {
  id              String      @id @default(cuid())
  fullName        String
  originCountry   String
  hasAtomicButton Boolean     @default(false)
  createdAt       DateTime    @default(now())
  user            User?
  ownerships      Ownership[]
}

model Ownership {
  id          String    @id @default(cuid())
  presidentId String
  satelliteId String
  president   President @relation(fields: [presidentId], references: [id], onDelete: Cascade)
  satellite   Satellite @relation(fields: [satelliteId], references: [id], onDelete: Cascade)
}

model Satellite {
  id              String      @id @default(cuid())
  sideNumber      String
  manufacturer    String
  model           String
  softwareVersion String
  manufactureYear Int
  launchDate      DateTime
  ammunition      Int
  altitudeInOrbit Int
  hasAI           Boolean
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  ownerships      Ownership[]
}

// Necessary for Next auth
model User {
  id        String     @id @default(cuid())
  presidentId String @unique
  email     String     @unique @db.VarChar(255)
  password  String
  accounts  Account[]
  sessions  Session[]
  president President @relation(fields: [presidentId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
